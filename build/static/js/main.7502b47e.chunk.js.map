{"version":3,"sources":["utils/useInterval/index.js","utils/duration/index.js","pomodoro/FocusTime.js","pomodoro/BreakTime.js","pomodoro/Timer.js","utils/class-names/index.js","pomodoro/Subtitle.js","pomodoro/Pomodoro.js","App.js","index.js"],"names":["useInterval","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","FocusTime","focusDuration","increaseFocusTime","isTimerRunning","decreaseFocusTime","className","data-testid","type","onClick","disabled","BreakTime","breakDuration","increaseBreakTime","decreaseBreakTime","Timer","classNameToBoolean","playPause","stopButtonHandler","role","aria-label","title","oi","Object","entries","reduce","classes","value","concat","undefined","filter","join","Subtitle","aria","session","label","toLowerCase","indexOf","givenSeconds","seconds","round","secondsToDuration","timeRemaining","style","height","aria-valuemin","aria-valuemax","aria-valuenow","width","nextTick","prevState","max","Pomodoro","useState","setIsTimerRunning","setSession","setFocusDuration","setBreakDuration","elapsed","setElapsed","setAria","breakLeft","setBreakLeft","Audio","play","currentSession","nextSession","left","nextState","prevStateSession","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7502b47e.chunk.js","sourcesContent":["// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction FocusTime({ focusDuration, increaseFocusTime, isTimerRunning, decreaseFocusTime }) {\n    return (\n        <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-focus\">\n                {/* TODO: Update this text to display the current focus session duration */}\n                Focus Duration: {minutesToDuration(\"0\" + focusDuration)}\n            </span>\n            <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"decrease-focus\"\n                    onClick={decreaseFocusTime}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-minus\" />\n                </button>\n                {/* TODO: Implement increasing focus duration and disable during a focus or break session */}\n                <button\n                    type=\"button\"\n                    className=\"btn btn-secondary\"\n                    data-testid=\"increase-focus\"\n                    onClick={increaseFocusTime}\n                    disabled={isTimerRunning}\n                >\n                    <span className=\"oi oi-plus\" />\n                </button>\n            </div>\n        </div>\n    )\n}\n\nexport default FocusTime;","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\n\nfunction BreakTime({ breakDuration, increaseBreakTime, isTimerRunning, decreaseBreakTime }) {\n    return (\n        <div className=\"input-group input-group-lg mb-2\">\n            <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration: {minutesToDuration(\"0\" + breakDuration)}\n            </span>\n            <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"decrease-break\"\n                onClick={decreaseBreakTime}\n                disabled={isTimerRunning}\n            >\n                <span className=\"oi oi-minus\" />\n            </button>\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n            <button\n                type=\"button\"\n                className=\"btn btn-secondary\"\n                data-testid=\"increase-break\"\n                onClick={increaseBreakTime}\n                disabled={isTimerRunning}\n            >\n                <span className=\"oi oi-plus\" />\n            </button>\n            </div>\n        </div>\n    )\n}\n\nexport default BreakTime;","import React from \"react\";\nimport classNames from \"../utils/class-names\";\n\nfunction Timer({ playPause, isTimerRunning, stopButtonHandler }) {\n    return (\n        <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n        >\n    <button\n      type=\"button\"\n      className=\"btn btn-primary\"\n      data-testid=\"play-pause\"\n      title=\"Start or pause timer\"\n      onClick={playPause}\n    >\n      <span\n        className={classNames({\n          oi: true,\n          \"oi-media-play\": !isTimerRunning,\n          \"oi-media-pause\": isTimerRunning,\n        })}\n      />\n    </button>\n    {/* TODO: Implement stopping the current focus or break session. and disable the stop button when there is no active session */}\n    {/* TODO: Disable the stop button when there is no active session */}\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary\"\n      data-testid=\"stop\"\n      title=\"Stop the session\"\n      disabled= {!isTimerRunning}\n      onClick={stopButtonHandler}\n    >\n      <span className=\"oi oi-media-stop\" />\n    </button>\n  </div>\n    )\n}\n\nexport default Timer;","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","import React from \"react\";\nimport { minutesToDuration } from \"../utils/duration\";\nimport { secondsToDuration } from \"../utils/duration\";\n\nfunction Subtitle({ aria, breakDuration, focusDuration, session, isTimerRunning }) {\n    return (\n        <div>\n        {/* TODO: This area should show only when there is an active focus or break - i.e. the session is running or is paused */}\n            {session && (<div className=\"row mb-2\">\n                <div className=\"col\">\n                    {/* TODO: Update message below to include current session (Focusing or On Break) total duration */}\n                    <h2 data-testid=\"session-title\">\n                    {session && session.label} for {minutesToDuration(\"0\" + (session.label.toLowerCase().indexOf(\"ocus\") > 0 ? focusDuration : breakDuration))} minutes\n                    </h2>\n                    {/* TODO: Update message below correctly format the time remaining in the current session */}\n                    <p className=\"lead\" data-testid=\"session-sub-title\">\n                    {session && secondsToDuration(session.timeRemaining)} remaining\n                    {/* Onclick handler for focus time should also reset time remaining to the new \"focus\" time */}\n                    </p>\n                    {isTimerRunning ? \"\" : <h2>PAUSED</h2>}\n                </div>\n            </div>)}\n            {session && <div className=\"row mb-2\">\n                <div className=\"col\">\n                    <div className=\"progress\" style={{ height: \"20px\" }}>\n                    <div\n                        className=\"progress-bar\"\n                        role=\"progressbar\"\n                        aria-valuemin=\"0\"\n                        aria-valuemax=\"100\"\n                        aria-valuenow={aria} // TODO: Increase aria-valuenow as elapsed time increases\n                        style={{ width: `${aria}%` }} // TODO: Increase width % as elapsed time increases\n                    />\n                    </div>\n                </div>\n            </div>}\n        </div>\n    )\n}\n\nexport default Subtitle;","import React, { useState } from \"react\";\n//import classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTime from \"./FocusTime\";\nimport BreakTime from \"./BreakTime\";\nimport Timer from \"./Timer\";\nimport Subtitle from \"./Subtitle\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsed, setElapsed] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0);\n\n\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  //const focusDuration = 25;\n  //const breakDuration = 5;\n\n  const increaseFocusTime = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  }  \n\n  const decreaseFocusTime = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  }\n\n  const increaseBreakTime = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  }  \n\n  const decreaseBreakTime = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  }\n\n  const stopButtonHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setElapsed(0);\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1)\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n    setSession(nextTick);    \n  const left = session.timeRemaining\n  if(session.label === \"Focusing\") {\n    setAria(100*(focusDuration * 60 - left)/(focusDuration*60))\n  } else {\n    setAria(100*(breakDuration * 60 - left)/(breakDuration*60))\n  }\n  }, \n  isTimerRunning ? 1000 : null\n);\n\n\nuseInterval(()=> {\n if(session && session.timeRemaining) {\n   return setElapsed(elapsed + 1)\n }\n}, 1000)\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusTime\n          focusDuration={focusDuration}\n          increaseFocusTime={increaseFocusTime}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusTime={decreaseFocusTime}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakTime\n            breakDuration={breakDuration}\n            increaseBreakTime={increaseBreakTime}\n            isTimerRunning={isTimerRunning}\n            decreaseBreakTime={decreaseBreakTime}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*Timer Start?*/}\n          <Timer\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            stopButtonHandler={stopButtonHandler}\n          />\n        </div>\n      </div>\n        <Subtitle \n          aria={aria}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          session={session}\n          isTimerRunning={isTimerRunning}\n        />  \n    </div>\n  );\n}\n\nexport default Pomodoro;\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}