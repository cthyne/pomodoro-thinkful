{"ast":null,"code":"import _slicedToArray from\"/Users/cthyne/Desktop/qualified-challenges/pomodoro-timer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import _objectSpread from\"/Users/cthyne/Desktop/qualified-challenges/pomodoro-timer/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import React,{useState}from\"react\";//import classNames from \"../utils/class-names\";\nimport useInterval from\"../utils/useInterval\";import FocusTime from\"./FocusTime\";import BreakTime from\"./BreakTime\";import Timer from\"./Timer\";import Subtitle from\"./Subtitle\";// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */function nextTick(prevState){var timeRemaining=Math.max(0,prevState.timeRemaining-1);return _objectSpread(_objectSpread({},prevState),{},{timeRemaining:timeRemaining});}/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */function nextSession(focusDuration,breakDuration){/**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */return function(currentSession){if(currentSession.label===\"Focusing\"){return{label:\"On Break\",timeRemaining:breakDuration*60};}return{label:\"Focusing\",timeRemaining:focusDuration*60};};}function Pomodoro(){// Timer starts out paused\nvar _useState=useState(false),_useState2=_slicedToArray(_useState,2),isTimerRunning=_useState2[0],setIsTimerRunning=_useState2[1];// The current session - null where there is no session running\nvar _useState3=useState(null),_useState4=_slicedToArray(_useState3,2),session=_useState4[0],setSession=_useState4[1];var _useState5=useState(25),_useState6=_slicedToArray(_useState5,2),focusDuration=_useState6[0],setFocusDuration=_useState6[1];var _useState7=useState(5),_useState8=_slicedToArray(_useState7,2),breakDuration=_useState8[0],setBreakDuration=_useState8[1];var _useState9=useState(0),_useState10=_slicedToArray(_useState9,2),elapsed=_useState10[0],setElapsed=_useState10[1];var _useState11=useState(0),_useState12=_slicedToArray(_useState11,2),aria=_useState12[0],setAria=_useState12[1];var _useState13=useState(0),_useState14=_slicedToArray(_useState13,2),breakLeft=_useState14[0],setBreakLeft=_useState14[1];// ToDo: Allow the user to adjust the focus and break duration.\n//const focusDuration = 25;\n//const breakDuration = 5;\nvar increaseFocusTime=function increaseFocusTime(){if(focusDuration<60)setFocusDuration(focusDuration+5);};var decreaseFocusTime=function decreaseFocusTime(){if(focusDuration>5)setFocusDuration(focusDuration-5);};var increaseBreakTime=function increaseBreakTime(){if(breakDuration<15)setBreakDuration(breakDuration+1);};var decreaseBreakTime=function decreaseBreakTime(){if(breakDuration>1)setBreakDuration(breakDuration-1);};var stopButtonHandler=function stopButtonHandler(){setSession(null);setIsTimerRunning(false);setElapsed(0);};/**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */useInterval(function(){setBreakLeft(breakLeft+1);if(session.timeRemaining===0){new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();setSession(nextSession(focusDuration,breakDuration));}setSession(nextTick);var left=session.timeRemaining;if(session.label===\"Focusing\"){setAria(100*(focusDuration*60-left)/(focusDuration*60));}else{setAria(100*(breakDuration*60-left)/(breakDuration*60));}},isTimerRunning?1000:null);useInterval(function(){if(session&&session.timeRemaining){return setElapsed(elapsed+1);}},1000);/**\n   * Called whenever the play/pause button is clicked.\n   */function playPause(){setIsTimerRunning(function(prevState){var nextState=!prevState;if(nextState){setSession(function(prevStateSession){// If the timer is starting and the previous session is null,\n// start a focusing session.\nif(prevStateSession===null){return{label:\"Focusing\",timeRemaining:focusDuration*60};}return prevStateSession;});}return nextState;});}return/*#__PURE__*/React.createElement(\"div\",{className:\"pomodoro\"},/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(FocusTime,{focusDuration:focusDuration,increaseFocusTime:increaseFocusTime,isTimerRunning:isTimerRunning,decreaseFocusTime:decreaseFocusTime})),/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(\"div\",{className:\"float-right\"},/*#__PURE__*/React.createElement(BreakTime,{breakDuration:breakDuration,increaseBreakTime:increaseBreakTime,isTimerRunning:isTimerRunning,decreaseBreakTime:decreaseBreakTime})))),/*#__PURE__*/React.createElement(\"div\",{className:\"row\"},/*#__PURE__*/React.createElement(\"div\",{className:\"col\"},/*#__PURE__*/React.createElement(Timer,{playPause:playPause,isTimerRunning:isTimerRunning,stopButtonHandler:stopButtonHandler}))),/*#__PURE__*/React.createElement(Subtitle,{aria:aria,breakDuration:breakDuration,focusDuration:focusDuration,session:session,isTimerRunning:isTimerRunning}));}export default Pomodoro;","map":{"version":3,"sources":["/Users/cthyne/Desktop/qualified-challenges/pomodoro-timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusTime","BreakTime","Timer","Subtitle","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","elapsed","setElapsed","aria","setAria","breakLeft","setBreakLeft","increaseFocusTime","decreaseFocusTime","increaseBreakTime","decreaseBreakTime","stopButtonHandler","Audio","play","left","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n//import classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTime from \"./FocusTime\";\nimport BreakTime from \"./BreakTime\";\nimport Timer from \"./Timer\";\nimport Subtitle from \"./Subtitle\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsed, setElapsed] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0);\n\n\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  //const focusDuration = 25;\n  //const breakDuration = 5;\n\n  const increaseFocusTime = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  }  \n\n  const decreaseFocusTime = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  }\n\n  const increaseBreakTime = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  }  \n\n  const decreaseBreakTime = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  }\n\n  const stopButtonHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setElapsed(0);\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1)\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n    setSession(nextTick);    \n  const left = session.timeRemaining\n  if(session.label === \"Focusing\") {\n    setAria(100*(focusDuration * 60 - left)/(focusDuration*60))\n  } else {\n    setAria(100*(breakDuration * 60 - left)/(breakDuration*60))\n  }\n  }, \n  isTimerRunning ? 1000 : null\n);\n\n\nuseInterval(()=> {\n if(session && session.timeRemaining) {\n   return setElapsed(elapsed + 1)\n }\n}, 1000)\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusTime\n          focusDuration={focusDuration}\n          increaseFocusTime={increaseFocusTime}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusTime={decreaseFocusTime}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakTime\n            breakDuration={breakDuration}\n            increaseBreakTime={increaseBreakTime}\n            isTimerRunning={isTimerRunning}\n            decreaseBreakTime={decreaseBreakTime}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*Timer Start?*/}\n          <Timer\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            stopButtonHandler={stopButtonHandler}\n          />\n        </div>\n      </div>\n        <Subtitle \n          aria={aria}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          session={session}\n          isTimerRunning={isTimerRunning}\n        />  \n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}