{"ast":null,"code":"var _jsxFileName = \"/Users/cthyne/Desktop/qualified-challenges/pomodoro-timer/src/pomodoro/Pomodoro.js\";\nimport React, { useState } from \"react\"; //import classNames from \"../utils/class-names\";\n\nimport useInterval from \"../utils/useInterval\";\nimport FocusTime from \"./FocusTime\";\nimport BreakTime from \"./BreakTime\";\nimport Timer from \"./Timer\";\nimport Subtitle from \"./Subtitle\"; // These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\n\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return { ...prevState,\n    timeRemaining\n  };\n}\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\n\n\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return currentSession => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60\n      };\n    }\n\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false); // The current session - null where there is no session running\n\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsed, setElapsed] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0); // ToDo: Allow the user to adjust the focus and break duration.\n  //const focusDuration = 25;\n  //const breakDuration = 5;\n\n  const increaseFocusTime = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  };\n\n  const decreaseFocusTime = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  };\n\n  const increaseBreakTime = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  };\n\n  const decreaseBreakTime = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  };\n\n  const stopButtonHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setElapsed(0);\n  };\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n\n\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1);\n\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n\n    setSession(nextTick);\n    const left = session.timeRemaining;\n\n    if (session.label === \"Focusing\") {\n      setAria(100 * (focusDuration * 60 - left) / (focusDuration * 60));\n    } else {\n      setAria(100 * (breakDuration * 60 - left) / (breakDuration * 60));\n    }\n  }, isTimerRunning ? 1000 : null);\n  useInterval(() => {\n    if (session && session.timeRemaining) {\n      return setElapsed(elapsed + 1);\n    }\n  }, 1000);\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n\n  function playPause() {\n    setIsTimerRunning(prevState => {\n      const nextState = !prevState;\n\n      if (nextState) {\n        setSession(prevStateSession => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60\n            };\n          }\n\n          return prevStateSession;\n        });\n      }\n\n      return nextState;\n    });\n  }\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"pomodoro\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 148,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(FocusTime, {\n    focusDuration: focusDuration,\n    increaseFocusTime: increaseFocusTime,\n    isTimerRunning: isTimerRunning,\n    decreaseFocusTime: decreaseFocusTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149,\n      columnNumber: 11\n    }\n  })), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"float-right\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, /*#__PURE__*/React.createElement(BreakTime, {\n    breakDuration: breakDuration,\n    increaseBreakTime: increaseBreakTime,\n    isTimerRunning: isTimerRunning,\n    decreaseBreakTime: decreaseBreakTime,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 13\n    }\n  })))), /*#__PURE__*/React.createElement(\"div\", {\n    className: \"row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 167,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    className: \"col\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 168,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(Timer, {\n    playPause: playPause,\n    isTimerRunning: isTimerRunning,\n    stopButtonHandler: stopButtonHandler,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170,\n      columnNumber: 11\n    }\n  }))), /*#__PURE__*/React.createElement(Subtitle, {\n    aria: aria,\n    breakDuration: breakDuration,\n    focusDuration: focusDuration,\n    session: session,\n    isTimerRunning: isTimerRunning,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 9\n    }\n  }));\n}\n\nexport default Pomodoro;","map":{"version":3,"sources":["/Users/cthyne/Desktop/qualified-challenges/pomodoro-timer/src/pomodoro/Pomodoro.js"],"names":["React","useState","useInterval","FocusTime","BreakTime","Timer","Subtitle","nextTick","prevState","timeRemaining","Math","max","nextSession","focusDuration","breakDuration","currentSession","label","Pomodoro","isTimerRunning","setIsTimerRunning","session","setSession","setFocusDuration","setBreakDuration","elapsed","setElapsed","aria","setAria","breakLeft","setBreakLeft","increaseFocusTime","decreaseFocusTime","increaseBreakTime","decreaseBreakTime","stopButtonHandler","Audio","play","left","playPause","nextState","prevStateSession"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\n//import classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport FocusTime from \"./FocusTime\";\nimport BreakTime from \"./BreakTime\";\nimport Timer from \"./Timer\";\nimport Subtitle from \"./Subtitle\";\n\n// These functions are defined outside of the component to insure they do not have access to state\n// and are, therefore more likely to be pure.\n\n/**\n * Update the session state with new state after each tick of the interval.\n * @param prevState\n *  the previous session state\n * @returns\n *  new session state with timing information updated.\n */\nfunction nextTick(prevState) {\n  const timeRemaining = Math.max(0, prevState.timeRemaining - 1);\n  return {\n    ...prevState,\n    timeRemaining,\n  };\n}\n\n/**\n * Higher order function that returns a function to update the session state with the next session type upon timeout.\n * @param focusDuration\n *    the current focus duration\n * @param breakDuration\n *    the current break duration\n * @returns\n *  function to update the session state.\n */\nfunction nextSession(focusDuration, breakDuration) {\n  /**\n   * State function to transition the current session type to the next session. e.g. On Break -> Focusing or Focusing -> On Break\n   */\n  return (currentSession) => {\n    if (currentSession.label === \"Focusing\") {\n      return {\n        label: \"On Break\",\n        timeRemaining: breakDuration * 60,\n      };\n    }\n    return {\n      label: \"Focusing\",\n      timeRemaining: focusDuration * 60,\n    };\n  };\n}\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // The current session - null where there is no session running\n  const [session, setSession] = useState(null);\n  const [focusDuration, setFocusDuration] = useState(25);\n  const [breakDuration, setBreakDuration] = useState(5);\n  const [elapsed, setElapsed] = useState(0);\n  const [aria, setAria] = useState(0);\n  const [breakLeft, setBreakLeft] = useState(0);\n\n\n\n  // ToDo: Allow the user to adjust the focus and break duration.\n  //const focusDuration = 25;\n  //const breakDuration = 5;\n\n  const increaseFocusTime = () => {\n    if (focusDuration < 60) setFocusDuration(focusDuration + 5);\n  }  \n\n  const decreaseFocusTime = () => {\n    if (focusDuration > 5) setFocusDuration(focusDuration - 5);\n  }\n\n  const increaseBreakTime = () => {\n    if (breakDuration < 15) setBreakDuration(breakDuration + 1);\n  }  \n\n  const decreaseBreakTime = () => {\n    if (breakDuration > 1) setBreakDuration(breakDuration - 1);\n  }\n\n  const stopButtonHandler = () => {\n    setSession(null);\n    setIsTimerRunning(false);\n    setElapsed(0);\n  }\n\n  /**\n   * Custom hook that invokes the callback function every second\n   *\n   * NOTE: You will not need to make changes to the callback function\n   */\n  useInterval(() => {\n    setBreakLeft(breakLeft + 1)\n    if (session.timeRemaining === 0) {\n      new Audio(\"https://bigsoundbank.com/UPLOAD/mp3/1482.mp3\").play();\n      setSession(nextSession(focusDuration, breakDuration));\n    }\n    setSession(nextTick);    \n  const left = session.timeRemaining\n  if(session.label === \"Focusing\") {\n    setAria(100*(focusDuration * 60 - left)/(focusDuration*60))\n  } else {\n    setAria(100*(breakDuration * 60 - left)/(breakDuration*60))\n  }\n  }, \n  isTimerRunning ? 1000 : null\n);\n\n\nuseInterval(()=> {\n if(session && session.timeRemaining) {\n   return setElapsed(elapsed + 1)\n }\n}, 1000)\n\n  /**\n   * Called whenever the play/pause button is clicked.\n   */\n  function playPause() {\n    setIsTimerRunning((prevState) => {\n      const nextState = !prevState;\n      if (nextState) {\n        setSession((prevStateSession) => {\n          // If the timer is starting and the previous session is null,\n          // start a focusing session.\n          if (prevStateSession === null) {\n            return {\n              label: \"Focusing\",\n              timeRemaining: focusDuration * 60,\n            };\n          }\n          return prevStateSession;\n        });\n      }\n      return nextState;\n    });\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <FocusTime\n          focusDuration={focusDuration}\n          increaseFocusTime={increaseFocusTime}\n          isTimerRunning={isTimerRunning}\n          decreaseFocusTime={decreaseFocusTime}\n          />\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <BreakTime\n            breakDuration={breakDuration}\n            increaseBreakTime={increaseBreakTime}\n            isTimerRunning={isTimerRunning}\n            decreaseBreakTime={decreaseBreakTime}\n            />\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          {/*Timer Start?*/}\n          <Timer\n            playPause={playPause}\n            isTimerRunning={isTimerRunning}\n            stopButtonHandler={stopButtonHandler}\n          />\n        </div>\n      </div>\n        <Subtitle \n          aria={aria}\n          breakDuration={breakDuration}\n          focusDuration={focusDuration}\n          session={session}\n          isTimerRunning={isTimerRunning}\n        />  \n    </div>\n  );\n}\n\nexport default Pomodoro;\n"]},"metadata":{},"sourceType":"module"}